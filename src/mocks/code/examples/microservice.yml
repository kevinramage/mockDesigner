name: MicroServices
services:

# Get commands
- name: GetAllCommands
  method: GET
  path: /api/v1/command
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: getall
        storage:
          businessObject: command

# Get a command
- name: GetCommand
  method: GET
  path: /api/v1/command/:cmdId
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: get
        storage:
          businessObject: command
          propertyValue: "{{.request.params.cmdId}}"

# Create a command
- name: CreateCommand
  method: POST
  path: /api/v1/command
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: create
        storage:
          businessObject: command
          propertyName: commandId
          propertyValue: "{{Increment(command)}}"
        data: "{{.request.body}}"
        expiration: 60

# Update a command
- name: UpdateCommand
  method: PUT
  path: /api/v1/command/:cmdId
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: update
        storage:
          businessObject: command
          propertyValue: "{{.request.params.cmdId}}"
        expiration: 60

# Delete a command
- name: DeleteCommand
  method: DELETE
  path: /api/v1/command/:cmdId
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: delete
        storage:
          businessObject: command
          propertyValue: "{{.request.params.cmdId}}"

# Get products
- name: GetAllProducts
  method: GET
  path: /api/v1/command/:cmdId/product
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: getall
        storage:
          businessObject: product
          parent:
            businessObject: command
            propertyValue: "{{.request.params.cmdId}}"

# Get a product
- name: GetProduct
  method: GET
  path: /api/v1/command/:cmdId/product/:prdId
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: get
        storage:
          businessObject: product
          propertyValue: "{{.request.params.prdId}}"
          parent:
            businessObject: command
            propertyValue: "{{.request.params.cmdId}}"

# Create a product
- name: CreateProduct
  method: POST
  path: /api/v1/command/:cmdId/product
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: create
        storage:
          businessObject: product
          propertyName: productId
          propertyValue: "{{Increment(command{{.request.params.cmdId}}, product)}}"
          parent:
            businessObject: command
            propertyValue: "{{.request.params.cmdId}}"
        data: "{{.request.body}}"
        expiration: 60

# Update a product
- name: UpdateProduct
  method: PUT
  path: /api/v1/command/:cmdId/product/:prdId
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: update
        storage:
          businessObject: product
          propertyValue: "{{.request.params.prdId}}"
          parent:
            businessObject: command
            propertyValue: "{{.request.params.cmdId}}"
        expiration: 60

# Delete a product
- name: DeleteProduct
  method: DELETE
  path: /api/v1/command/:cmdId/product/:prdId
  response:
    triggers:
    - type: none
      actions:
      - type: microservice
        action: delete
        storage:
          businessObject: product
          propertyValue: "{{.request.params.prdId}}"
          parent:
            businessObject: command
            propertyValue: "{{.request.params.cmdId}}"