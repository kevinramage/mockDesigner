name: Behaviour
vars:
  host: "localhost"
testcases:

# Build mock
- name: BuildMockService
  steps:
  - type: exec
    script: npm run start -- --input tests/code/examples/behaviour.yml
    assertions:
    - result.code ShouldEqual 0
  - type: exec
    script: docker-compose -f generated/docker-compose.yml up -d --build
  - type: exec
    script: sleep 10

# Test nominal case
- name: TestNominalCase
  steps:
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "Operation completed successfully"
    - result.statuscode ShouldEqual 200

# Test behaviour nominal case
- name: TestBehaviourNominalCase
  steps:

  # Clean behaviours
  - type: http
    method: DELETE
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour"
    assertions:
    - result.statuscode ShouldEqual 204

  # Create behaviour instance
  - type: http
    method: GET
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour"
    assertions:
    - result.bodyjson.__len__ ShouldEqual 0 
    - result.statuscode ShouldEqual 200
  - type: http
    method: GET
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour/ERROR_500"
    assertions:
    - result.statuscode ShouldEqual 404
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour"
    headers:
      Content-Type: application/json
    body: "{ \"name\": \"ERROR_500\" }"
    assertions:
    - result.statuscode ShouldEqual 201
  - type: http
    method: GET
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour"
    assertions:
    - result.bodyjson.__len__ ShouldEqual 1 
    - result.statuscode ShouldEqual 200
    - result.bodyjson.bodyjson0.name ShouldEqual ERROR_500
  - type: http
    method: GET
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour/ERROR_500"
    assertions:
    - result.statuscode ShouldEqual 200
    - result.bodyjson.name ShouldEqual ERROR_500

  # Test behaviour
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "An internal error occured"
    - result.statuscode ShouldEqual 500

  # Test behaviour deletion
- name: TestBehaviourDeletion
  steps:
  - type: http
    method: DELETE
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour/ERROR_500"
    assertions:
    - result.statuscode ShouldEqual 204
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "Operation completed successfully"
    - result.statuscode ShouldEqual 200

# Test behaviour repeat system
- name: TestBehaviourRepeatCase
  steps:

  # Create behaviour
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour"
    headers:
      Content-Type: application/json
    body: "{ \"name\": \"ERROR_500\" }"
    assertions:
    - result.statuscode ShouldEqual 201

  # Call 3 times the service
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "An internal error occured"
    - result.statuscode ShouldEqual 500
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "An internal error occured"
    - result.statuscode ShouldEqual 500
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "An internal error occured"
    - result.statuscode ShouldEqual 500

  # Call 1 more time the service
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "Operation completed successfully"
    - result.statuscode ShouldEqual 200

# Test behaviour conditions system
- name: TestBehaviourConditionsCase
  steps:

  # Create behaviour
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService/_behaviour"
    headers:
      Content-Type: application/json
    body: "{ \"name\": \"ERROR_500\" }"
    assertions:
    - result.statuscode ShouldEqual 201

  # Test conditions
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"name\": \"MyName\" }"
    assertions:
    - result.body ShouldEqual "Operation completed successfully"
    - result.statuscode ShouldEqual 200
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "Operation completed successfully"
    - result.statuscode ShouldEqual 200
  - type: http
    method: POST
    url: "http://{{.host}}:7001/api/v1/myService"
    headers:
      Content-Type: "application/json"
    body: "{ \"name\": \"MyName\", \"description\": \"myDescription\" }"
    assertions:
    - result.body ShouldEqual "An internal error occured"
    - result.statuscode ShouldEqual 500