name: RequestStorage
vars:
  host: "localhost"
  port: 7016
  output: generated_requeststorage_1
testcases:

# Build mock
- name: BuildMockService
  steps:
  - type: exec
    script: npm run start -- --input mocks/code/examples/requestStorage.yml --port {{.port}} --output {{.output}}
    assertions:
    - result.code ShouldEqual 0
  - type: exec
    script: docker-compose -f {{.output}}/docker-compose.yml up -d --force-recreate --build
  - type: exec
    script: ./wait {{.output}}_was_1
  - type: http
    method: GET
    url: "http://{{.host}}:{{.port}}/api/v1/basicService/_ping"
    assertions:
    - result.statuscode ShouldEqual 204

# Send a request
- name: SendRequest
  steps:
  - type: http
    method: POST
    url: "http://{{.host}}:{{.port}}/api/v1/basicService/1234"
    headers:
      Content-Type: application/json
    body: "{\"deliveryId\": \"1\",\"username\": \"userAuthFailed\",\"password\": \"1234\"}"
    assertions:
    - result.statuscode ShouldEqual 200
  - type: http
    method: GET
    url: "http://{{.host}}:{{.port}}/api/v1/_getRequest?serviceName=basicService&key1=1234&key2=1"
    assertions:
    - result.statuscode ShouldEqual 200
    - result.bodyjson.request.protocol ShouldEqual "http"
    - result.bodyjson.request.url ShouldEqual "http://{{.host}}:{{.port}}/api/v1/basicService/1234"
    - result.bodyjson.request.path ShouldEqual "/api/v1/basicService/1234"
    - result.bodyjson.request.method ShouldEqual "POST"
    - result.bodyjson.request.body.deliveryid ShouldEqual "1"
    - result.bodyjson.request.body.username ShouldEqual "userAuthFailed"
    - result.bodyjson.request.body.password ShouldEqual "1234"
    - result.bodyjson.response.status ShouldEqual "200"
    - result.bodyjson.response.body ShouldEqual "OK"