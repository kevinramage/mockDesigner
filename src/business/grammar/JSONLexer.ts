// Generated from business/grammar/JSON.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONLexer extends Lexer {
	channelNames: string[] = [];
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly DOT = 10;
	public static readonly OPEN_EXP = 11;
	public static readonly CLOSE_EXP = 12;
	public static readonly NUMBER = 13;
	public static readonly IDENT = 14;
	public static readonly STRING = 15;
	public static readonly WS = 16;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"DOT", "OPEN_EXP", "CLOSE_EXP", "NUMBER", "INT", "EXP", "IDENT", "STRING", 
		"ESC", "UNICODE", "HEX", "ID", "SAFECODEPOINT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", "'false'", 
		"'null'", "'.'", "'{{'", "'}}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "DOT", "OPEN_EXP", "CLOSE_EXP", "NUMBER", 
		"IDENT", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONLexer._LITERAL_NAMES, JSONLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSON.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return JSONLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x12\x9E\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x05\x0EW\n\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x06\x0E\\\n\x0E\r\x0E\x0E\x0E]\x05\x0E`\n\x0E\x03" +
		"\x0E\x05\x0Ec\n\x0E\x03\x0F\x03\x0F\x03\x0F\x07\x0Fh\n\x0F\f\x0F\x0E\x0F" +
		"k\v\x0F\x05\x0Fm\n\x0F\x03\x10\x03\x10\x05\x10q\n\x10\x03\x10\x03\x10" +
		"\x03\x11\x03\x11\x03\x11\x07\x11x\n\x11\f\x11\x0E\x11{\v\x11\x03\x12\x03" +
		"\x12\x03\x12\x07\x12\x80\n\x12\f\x12\x0E\x12\x83\v\x12\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x13\x05\x13\x8A\n\x13\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03" +
		"\x18\x06\x18\x99\n\x18\r\x18\x0E\x18\x9A\x03\x18\x03\x18\x02\x02\x02\x19" +
		"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02" +
		"\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D" +
		"\x02\x02\x1F\x02\x02!\x02\x10#\x02\x11%\x02\x02\'\x02\x02)\x02\x02+\x02" +
		"\x02-\x02\x02/\x02\x12\x03\x02\f\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02" +
		"--//\x04\x02//aa\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x05\x022;C\\c|\x05" +
		"\x02\x02!$$^^\x05\x02\v\f\x0F\x0F\"\"\xA3\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x031\x03\x02" +
		"\x02\x02\x053\x03\x02\x02\x02\x075\x03\x02\x02\x02\t7\x03\x02\x02\x02" +
		"\v9\x03\x02\x02\x02\r;\x03\x02\x02\x02\x0F=\x03\x02\x02\x02\x11B\x03\x02" +
		"\x02\x02\x13H\x03\x02\x02\x02\x15M\x03\x02\x02\x02\x17O\x03\x02\x02\x02" +
		"\x19R\x03\x02\x02\x02\x1BV\x03\x02\x02\x02\x1Dl\x03\x02\x02\x02\x1Fn\x03" +
		"\x02\x02\x02!t\x03\x02\x02\x02#|\x03\x02\x02\x02%\x86\x03\x02\x02\x02" +
		"\'\x8B\x03\x02\x02\x02)\x91\x03\x02\x02\x02+\x93\x03\x02\x02\x02-\x95" +
		"\x03\x02\x02\x02/\x98\x03\x02\x02\x0212\x07}\x02\x022\x04\x03\x02\x02" +
		"\x0234\x07.\x02\x024\x06\x03\x02\x02\x0256\x07\x7F\x02\x026\b\x03\x02" +
		"\x02\x0278\x07<\x02\x028\n\x03\x02\x02\x029:\x07]\x02\x02:\f\x03\x02\x02" +
		"\x02;<\x07_\x02\x02<\x0E\x03\x02\x02\x02=>\x07v\x02\x02>?\x07t\x02\x02" +
		"?@\x07w\x02\x02@A\x07g\x02\x02A\x10\x03\x02\x02\x02BC\x07h\x02\x02CD\x07" +
		"c\x02\x02DE\x07n\x02\x02EF\x07u\x02\x02FG\x07g\x02\x02G\x12\x03\x02\x02" +
		"\x02HI\x07p\x02\x02IJ\x07w\x02\x02JK\x07n\x02\x02KL\x07n\x02\x02L\x14" +
		"\x03\x02\x02\x02MN\x070\x02\x02N\x16\x03\x02\x02\x02OP\x07}\x02\x02PQ" +
		"\x07}\x02\x02Q\x18\x03\x02\x02\x02RS\x07\x7F\x02\x02ST\x07\x7F\x02\x02" +
		"T\x1A\x03\x02\x02\x02UW\x07/\x02\x02VU\x03\x02\x02\x02VW\x03\x02\x02\x02" +
		"WX\x03\x02\x02\x02X_\x05\x1D\x0F\x02Y[\x070\x02\x02Z\\\t\x02\x02\x02[" +
		"Z\x03\x02\x02\x02\\]\x03\x02\x02\x02][\x03\x02\x02\x02]^\x03\x02\x02\x02" +
		"^`\x03\x02\x02\x02_Y\x03\x02\x02\x02_`\x03\x02\x02\x02`b\x03\x02\x02\x02" +
		"ac\x05\x1F\x10\x02ba\x03\x02\x02\x02bc\x03\x02\x02\x02c\x1C\x03\x02\x02" +
		"\x02dm\x072\x02\x02ei\t\x03\x02\x02fh\t\x02\x02\x02gf\x03\x02\x02\x02" +
		"hk\x03\x02\x02\x02ig\x03\x02\x02\x02ij\x03\x02\x02\x02jm\x03\x02\x02\x02" +
		"ki\x03\x02\x02\x02ld\x03\x02\x02\x02le\x03\x02\x02\x02m\x1E\x03\x02\x02" +
		"\x02np\t\x04\x02\x02oq\t\x05\x02\x02po\x03\x02\x02\x02pq\x03\x02\x02\x02" +
		"qr\x03\x02\x02\x02rs\x05\x1D\x0F\x02s \x03\x02\x02\x02ty\x05+\x16\x02" +
		"ux\x05+\x16\x02vx\t\x06\x02\x02wu\x03\x02\x02\x02wv\x03\x02\x02\x02x{" +
		"\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z\"\x03\x02\x02\x02" +
		"{y\x03\x02\x02\x02|\x81\x07$\x02\x02}\x80\x05%\x13\x02~\x80\x05-\x17\x02" +
		"\x7F}\x03\x02\x02\x02\x7F~\x03\x02\x02\x02\x80\x83\x03\x02\x02\x02\x81" +
		"\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82\x84\x03\x02\x02\x02\x83" +
		"\x81\x03\x02\x02\x02\x84\x85\x07$\x02\x02\x85$\x03\x02\x02\x02\x86\x89" +
		"\x07^\x02\x02\x87\x8A\t\x07\x02\x02\x88\x8A\x05\'\x14\x02\x89\x87\x03" +
		"\x02\x02\x02\x89\x88\x03\x02\x02\x02\x8A&\x03\x02\x02\x02\x8B\x8C\x07" +
		"w\x02\x02\x8C\x8D\x05)\x15\x02\x8D\x8E\x05)\x15\x02\x8E\x8F\x05)\x15\x02" +
		"\x8F\x90\x05)\x15\x02\x90(\x03\x02\x02\x02\x91\x92\t\b\x02\x02\x92*\x03" +
		"\x02\x02\x02\x93\x94\t\t\x02\x02\x94,\x03\x02\x02\x02\x95\x96\n\n\x02" +
		"\x02\x96.\x03\x02\x02\x02\x97\x99\t\v\x02\x02\x98\x97\x03\x02\x02\x02" +
		"\x99\x9A\x03\x02\x02\x02\x9A\x98\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02" +
		"\x9B\x9C\x03\x02\x02\x02\x9C\x9D\b\x18\x02\x02\x9D0\x03\x02\x02\x02\x10" +
		"\x02V]_bilpwy\x7F\x81\x89\x9A\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONLexer.__ATN) {
			JSONLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONLexer._serializedATN));
		}

		return JSONLexer.__ATN;
	}

}

