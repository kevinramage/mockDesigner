// Generated from business/grammar/JSON.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONLexer extends Lexer {
	channelNames: string[] = [];
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly DOT = 11;
	public static readonly OPEN_EXP = 12;
	public static readonly CLOSE_EXP = 13;
	public static readonly NUMBER = 14;
	public static readonly IDENT = 15;
	public static readonly STRING = 16;
	public static readonly WS = 17;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "DOT", "OPEN_EXP", "CLOSE_EXP", "NUMBER", "INT", "EXP", "IDENT", 
		"STRING", "ESC", "UNICODE", "HEX", "ID", "SAFECODEPOINT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "','", "'}'", "':'", "'['", "']'", "'data'", "'true'", 
		"'false'", "'null'", "'.'", "'{{'", "'}}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "DOT", "OPEN_EXP", "CLOSE_EXP", 
		"NUMBER", "IDENT", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONLexer._LITERAL_NAMES, JSONLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSON.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return JSONLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x13\xA5\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0F\x05\x0F^\n\x0F\x03\x0F\x03\x0F\x03\x0F\x06" +
		"\x0Fc\n\x0F\r\x0F\x0E\x0Fd\x05\x0Fg\n\x0F\x03\x0F\x05\x0Fj\n\x0F\x03\x10" +
		"\x03\x10\x03\x10\x07\x10o\n\x10\f\x10\x0E\x10r\v\x10\x05\x10t\n\x10\x03" +
		"\x11\x03\x11\x05\x11x\n\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x07" +
		"\x12\x7F\n\x12\f\x12\x0E\x12\x82\v\x12\x03\x13\x03\x13\x03\x13\x07\x13" +
		"\x87\n\x13\f\x13\x0E\x13\x8A\v\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
		"\x14\x05\x14\x91\n\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x06\x19\xA0\n" +
		"\x19\r\x19\x0E\x19\xA1\x03\x19\x03\x19\x02\x02\x02\x1A\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x02!\x02\x02#\x02\x11%\x02\x12\'\x02\x02)\x02\x02+\x02\x02-\x02\x02/" +
		"\x02\x021\x02\x13\x03\x02\f\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--" +
		"//\x04\x02//aa\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x05\x022;C\\c|\x05" +
		"\x02\x02!$$^^\x05\x02\v\f\x0F\x0F\"\"\xAA\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x033\x03\x02\x02\x02\x055\x03\x02\x02\x02\x077\x03\x02\x02\x02" +
		"\t9\x03\x02\x02\x02\v;\x03\x02\x02\x02\r=\x03\x02\x02\x02\x0F?\x03\x02" +
		"\x02\x02\x11D\x03\x02\x02\x02\x13I\x03\x02\x02\x02\x15O\x03\x02\x02\x02" +
		"\x17T\x03\x02\x02\x02\x19V\x03\x02\x02\x02\x1BY\x03\x02\x02\x02\x1D]\x03" +
		"\x02\x02\x02\x1Fs\x03\x02\x02\x02!u\x03\x02\x02\x02#{\x03\x02\x02\x02" +
		"%\x83\x03\x02\x02\x02\'\x8D\x03\x02\x02\x02)\x92\x03\x02\x02\x02+\x98" +
		"\x03\x02\x02\x02-\x9A\x03\x02\x02\x02/\x9C\x03\x02\x02\x021\x9F\x03\x02" +
		"\x02\x0234\x07}\x02\x024\x04\x03\x02\x02\x0256\x07.\x02\x026\x06\x03\x02" +
		"\x02\x0278\x07\x7F\x02\x028\b\x03\x02\x02\x029:\x07<\x02\x02:\n\x03\x02" +
		"\x02\x02;<\x07]\x02\x02<\f\x03\x02\x02\x02=>\x07_\x02\x02>\x0E\x03\x02" +
		"\x02\x02?@\x07f\x02\x02@A\x07c\x02\x02AB\x07v\x02\x02BC\x07c\x02\x02C" +
		"\x10\x03\x02\x02\x02DE\x07v\x02\x02EF\x07t\x02\x02FG\x07w\x02\x02GH\x07" +
		"g\x02\x02H\x12\x03\x02\x02\x02IJ\x07h\x02\x02JK\x07c\x02\x02KL\x07n\x02" +
		"\x02LM\x07u\x02\x02MN\x07g\x02\x02N\x14\x03\x02\x02\x02OP\x07p\x02\x02" +
		"PQ\x07w\x02\x02QR\x07n\x02\x02RS\x07n\x02\x02S\x16\x03\x02\x02\x02TU\x07" +
		"0\x02\x02U\x18\x03\x02\x02\x02VW\x07}\x02\x02WX\x07}\x02\x02X\x1A\x03" +
		"\x02\x02\x02YZ\x07\x7F\x02\x02Z[\x07\x7F\x02\x02[\x1C\x03\x02\x02\x02" +
		"\\^\x07/\x02\x02]\\\x03\x02\x02\x02]^\x03\x02\x02\x02^_\x03\x02\x02\x02" +
		"_f\x05\x1F\x10\x02`b\x070\x02\x02ac\t\x02\x02\x02ba\x03\x02\x02\x02cd" +
		"\x03\x02\x02\x02db\x03\x02\x02\x02de\x03\x02\x02\x02eg\x03\x02\x02\x02" +
		"f`\x03\x02\x02\x02fg\x03\x02\x02\x02gi\x03\x02\x02\x02hj\x05!\x11\x02" +
		"ih\x03\x02\x02\x02ij\x03\x02\x02\x02j\x1E\x03\x02\x02\x02kt\x072\x02\x02" +
		"lp\t\x03\x02\x02mo\t\x02\x02\x02nm\x03\x02\x02\x02or\x03\x02\x02\x02p" +
		"n\x03\x02\x02\x02pq\x03\x02\x02\x02qt\x03\x02\x02\x02rp\x03\x02\x02\x02" +
		"sk\x03\x02\x02\x02sl\x03\x02\x02\x02t \x03\x02\x02\x02uw\t\x04\x02\x02" +
		"vx\t\x05\x02\x02wv\x03\x02\x02\x02wx\x03\x02\x02\x02xy\x03\x02\x02\x02" +
		"yz\x05\x1F\x10\x02z\"\x03\x02\x02\x02{\x80\x05-\x17\x02|\x7F\x05-\x17" +
		"\x02}\x7F\t\x06\x02\x02~|\x03\x02\x02\x02~}\x03\x02\x02\x02\x7F\x82\x03" +
		"\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81$\x03\x02" +
		"\x02\x02\x82\x80\x03\x02\x02\x02\x83\x88\x07$\x02\x02\x84\x87\x05\'\x14" +
		"\x02\x85\x87\x05/\x18\x02\x86\x84\x03\x02\x02\x02\x86\x85\x03\x02\x02" +
		"\x02\x87\x8A\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02" +
		"\x02\x89\x8B\x03\x02\x02\x02\x8A\x88\x03\x02\x02\x02\x8B\x8C\x07$\x02" +
		"\x02\x8C&\x03\x02\x02\x02\x8D\x90\x07^\x02\x02\x8E\x91\t\x07\x02\x02\x8F" +
		"\x91\x05)\x15\x02\x90\x8E\x03\x02\x02\x02\x90\x8F\x03\x02\x02\x02\x91" +
		"(\x03\x02\x02\x02\x92\x93\x07w\x02\x02\x93\x94\x05+\x16\x02\x94\x95\x05" +
		"+\x16\x02\x95\x96\x05+\x16\x02\x96\x97\x05+\x16\x02\x97*\x03\x02\x02\x02" +
		"\x98\x99\t\b\x02\x02\x99,\x03\x02\x02\x02\x9A\x9B\t\t\x02\x02\x9B.\x03" +
		"\x02\x02\x02\x9C\x9D\n\n\x02\x02\x9D0\x03\x02\x02\x02\x9E\xA0\t\v\x02" +
		"\x02\x9F\x9E\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\x9F\x03\x02\x02" +
		"\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA3\x03\x02\x02\x02\xA3\xA4\b\x19\x02" +
		"\x02\xA42\x03\x02\x02\x02\x10\x02]dfipsw~\x80\x86\x88\x90\xA1\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONLexer.__ATN) {
			JSONLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONLexer._serializedATN));
		}

		return JSONLexer.__ATN;
	}

}

