// Generated from business/grammar/JSON.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONLexer extends Lexer {
	channelNames: string[] = [];
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly DOT = 10;
	public static readonly COMMA = 11;
	public static readonly OPEN_EXP = 12;
	public static readonly CLOSE_EXP = 13;
	public static readonly LPARENTHESIS = 14;
	public static readonly RPARENTHESIS = 15;
	public static readonly NUMBER = 16;
	public static readonly IDENT = 17;
	public static readonly STRING = 18;
	public static readonly WS = 19;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"DOT", "COMMA", "OPEN_EXP", "CLOSE_EXP", "LPARENTHESIS", "RPARENTHESIS", 
		"NUMBER", "INT", "EXP", "IDENT", "STRING", "ESC", "UNICODE", "HEX", "ID", 
		"SAFECODEPOINT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "'}'", "':'", "'['", "']'", "'data'", "'true'", "'false'", 
		"'null'", "'.'", "','", "'{{'", "'}}'", "'('", "')'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "DOT", "COMMA", "OPEN_EXP", "CLOSE_EXP", 
		"LPARENTHESIS", "RPARENTHESIS", "NUMBER", "IDENT", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONLexer._LITERAL_NAMES, JSONLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSON.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return JSONLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x15\xAD\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03" +
		"\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x11\x05\x11f\n\x11\x03\x11\x03\x11\x03\x11\x06\x11" +
		"k\n\x11\r\x11\x0E\x11l\x05\x11o\n\x11\x03\x11\x05\x11r\n\x11\x03\x12\x03" +
		"\x12\x03\x12\x07\x12w\n\x12\f\x12\x0E\x12z\v\x12\x05\x12|\n\x12\x03\x13" +
		"\x03\x13\x05\x13\x80\n\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x07" +
		"\x14\x87\n\x14\f\x14\x0E\x14\x8A\v\x14\x03\x15\x03\x15\x03\x15\x07\x15" +
		"\x8F\n\x15\f\x15\x0E\x15\x92\v\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x16\x05\x16\x99\n\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x06\x1B\xA8\n" +
		"\x1B\r\x1B\x0E\x1B\xA9\x03\x1B\x03\x1B\x02\x02\x02\x1C\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x11!\x02\x12#\x02\x02%\x02\x02\'\x02\x13)\x02\x14+\x02\x02-\x02\x02/" +
		"\x02\x021\x02\x023\x02\x025\x02\x15\x03\x02\f\x03\x022;\x03\x023;\x04" +
		"\x02GGgg\x04\x02--//\x04\x02//aa\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x05" +
		"\x022;C\\c|\x05\x02\x02!$$^^\x05\x02\v\f\x0F\x0F\"\"\xB2\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x025\x03\x02\x02\x02\x03" +
		"7\x03\x02\x02\x02\x059\x03\x02\x02\x02\x07;\x03\x02\x02\x02\t=\x03\x02" +
		"\x02\x02\v?\x03\x02\x02\x02\rA\x03\x02\x02\x02\x0FF\x03\x02\x02\x02\x11" +
		"K\x03\x02\x02\x02\x13Q\x03\x02\x02\x02\x15V\x03\x02\x02\x02\x17X\x03\x02" +
		"\x02\x02\x19Z\x03\x02\x02\x02\x1B]\x03\x02\x02\x02\x1D`\x03\x02\x02\x02" +
		"\x1Fb\x03\x02\x02\x02!e\x03\x02\x02\x02#{\x03\x02\x02\x02%}\x03\x02\x02" +
		"\x02\'\x83\x03\x02\x02\x02)\x8B\x03\x02\x02\x02+\x95\x03\x02\x02\x02-" +
		"\x9A\x03\x02\x02\x02/\xA0\x03\x02\x02\x021\xA2\x03\x02\x02\x023\xA4\x03" +
		"\x02\x02\x025\xA7\x03\x02\x02\x0278\x07}\x02\x028\x04\x03\x02\x02\x02" +
		"9:\x07\x7F\x02\x02:\x06\x03\x02\x02\x02;<\x07<\x02\x02<\b\x03\x02\x02" +
		"\x02=>\x07]\x02\x02>\n\x03\x02\x02\x02?@\x07_\x02\x02@\f\x03\x02\x02\x02" +
		"AB\x07f\x02\x02BC\x07c\x02\x02CD\x07v\x02\x02DE\x07c\x02\x02E\x0E\x03" +
		"\x02\x02\x02FG\x07v\x02\x02GH\x07t\x02\x02HI\x07w\x02\x02IJ\x07g\x02\x02" +
		"J\x10\x03\x02\x02\x02KL\x07h\x02\x02LM\x07c\x02\x02MN\x07n\x02\x02NO\x07" +
		"u\x02\x02OP\x07g\x02\x02P\x12\x03\x02\x02\x02QR\x07p\x02\x02RS\x07w\x02" +
		"\x02ST\x07n\x02\x02TU\x07n\x02\x02U\x14\x03\x02\x02\x02VW\x070\x02\x02" +
		"W\x16\x03\x02\x02\x02XY\x07.\x02\x02Y\x18\x03\x02\x02\x02Z[\x07}\x02\x02" +
		"[\\\x07}\x02\x02\\\x1A\x03\x02\x02\x02]^\x07\x7F\x02\x02^_\x07\x7F\x02" +
		"\x02_\x1C\x03\x02\x02\x02`a\x07*\x02\x02a\x1E\x03\x02\x02\x02bc\x07+\x02" +
		"\x02c \x03\x02\x02\x02df\x07/\x02\x02ed\x03\x02\x02\x02ef\x03\x02\x02" +
		"\x02fg\x03\x02\x02\x02gn\x05#\x12\x02hj\x070\x02\x02ik\t\x02\x02\x02j" +
		"i\x03\x02\x02\x02kl\x03\x02\x02\x02lj\x03\x02\x02\x02lm\x03\x02\x02\x02" +
		"mo\x03\x02\x02\x02nh\x03\x02\x02\x02no\x03\x02\x02\x02oq\x03\x02\x02\x02" +
		"pr\x05%\x13\x02qp\x03\x02\x02\x02qr\x03\x02\x02\x02r\"\x03\x02\x02\x02" +
		"s|\x072\x02\x02tx\t\x03\x02\x02uw\t\x02\x02\x02vu\x03\x02\x02\x02wz\x03" +
		"\x02\x02\x02xv\x03\x02\x02\x02xy\x03\x02\x02\x02y|\x03\x02\x02\x02zx\x03" +
		"\x02\x02\x02{s\x03\x02\x02\x02{t\x03\x02\x02\x02|$\x03\x02\x02\x02}\x7F" +
		"\t\x04\x02\x02~\x80\t\x05\x02\x02\x7F~\x03\x02\x02\x02\x7F\x80\x03\x02" +
		"\x02\x02\x80\x81\x03\x02\x02\x02\x81\x82\x05#\x12\x02\x82&\x03\x02\x02" +
		"\x02\x83\x88\x051\x19\x02\x84\x87\x051\x19\x02\x85\x87\t\x06\x02\x02\x86" +
		"\x84\x03\x02\x02\x02\x86\x85\x03\x02\x02\x02\x87\x8A\x03\x02\x02\x02\x88" +
		"\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89(\x03\x02\x02\x02\x8A" +
		"\x88\x03\x02\x02\x02\x8B\x90\x07$\x02\x02\x8C\x8F\x05+\x16\x02\x8D\x8F" +
		"\x053\x1A\x02\x8E\x8C\x03\x02\x02\x02\x8E\x8D\x03\x02\x02\x02\x8F\x92" +
		"\x03\x02\x02\x02\x90\x8E\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x93" +
		"\x03\x02\x02\x02\x92\x90\x03\x02\x02\x02\x93\x94\x07$\x02\x02\x94*\x03" +
		"\x02\x02\x02\x95\x98\x07^\x02\x02\x96\x99\t\x07\x02\x02\x97\x99\x05-\x17" +
		"\x02\x98\x96\x03\x02\x02\x02\x98\x97\x03\x02\x02\x02\x99,\x03\x02\x02" +
		"\x02\x9A\x9B\x07w\x02\x02\x9B\x9C\x05/\x18\x02\x9C\x9D\x05/\x18\x02\x9D" +
		"\x9E\x05/\x18\x02\x9E\x9F\x05/\x18\x02\x9F.\x03\x02\x02\x02\xA0\xA1\t" +
		"\b\x02\x02\xA10\x03\x02\x02\x02\xA2\xA3\t\t\x02\x02\xA32\x03\x02\x02\x02" +
		"\xA4\xA5\n\n\x02\x02\xA54\x03\x02\x02\x02\xA6\xA8\t\v\x02\x02\xA7\xA6" +
		"\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xA9\xAA" +
		"\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xAC\b\x1B\x02\x02\xAC6\x03" +
		"\x02\x02\x02\x10\x02elnqx{\x7F\x86\x88\x8E\x90\x98\xA9\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONLexer.__ATN) {
			JSONLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONLexer._serializedATN));
		}

		return JSONLexer.__ATN;
	}

}

