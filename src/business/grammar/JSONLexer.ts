// Generated from business/grammar/JSON.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONLexer extends Lexer {
	channelNames: string[] = [];
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly DOT = 9;
	public static readonly COMMA = 10;
	public static readonly OPEN_EXP = 11;
	public static readonly CLOSE_EXP = 12;
	public static readonly LPARENTHESIS = 13;
	public static readonly RPARENTHESIS = 14;
	public static readonly LBRACKET = 15;
	public static readonly RBRACKET = 16;
	public static readonly NUMBER = 17;
	public static readonly IDENT = 18;
	public static readonly STRING = 19;
	public static readonly WS = 20;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "DOT", 
		"COMMA", "OPEN_EXP", "CLOSE_EXP", "LPARENTHESIS", "RPARENTHESIS", "LBRACKET", 
		"RBRACKET", "NUMBER", "INT", "EXP", "IDENT", "STRING", "ESC", "UNICODE", 
		"HEX", "ID", "SAFECODEPOINT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "'}'", "':'", "'data'", "'storage'", "'true'", "'false'", 
		"'null'", "'.'", "','", "'{{'", "'}}'", "'('", "')'", "'['", "']'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "DOT", "COMMA", "OPEN_EXP", "CLOSE_EXP", "LPARENTHESIS", 
		"RPARENTHESIS", "LBRACKET", "RBRACKET", "NUMBER", "IDENT", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONLexer._LITERAL_NAMES, JSONLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSON.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return JSONLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x16\xB7\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03" +
		"\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x05\x12p\n\x12\x03\x12\x03\x12" +
		"\x03\x12\x06\x12u\n\x12\r\x12\x0E\x12v\x05\x12y\n\x12\x03\x12\x05\x12" +
		"|\n\x12\x03\x13\x03\x13\x03\x13\x07\x13\x81\n\x13\f\x13\x0E\x13\x84\v" +
		"\x13\x05\x13\x86\n\x13\x03\x14\x03\x14\x05\x14\x8A\n\x14\x03\x14\x03\x14" +
		"\x03\x15\x03\x15\x03\x15\x07\x15\x91\n\x15\f\x15\x0E\x15\x94\v\x15\x03" +
		"\x16\x03\x16\x03\x16\x07\x16\x99\n\x16\f\x16\x0E\x16\x9C\v\x16\x03\x16" +
		"\x03\x16\x03\x17\x03\x17\x03\x17\x05\x17\xA3\n\x17\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03" +
		"\x1B\x03\x1C\x06\x1C\xB2\n\x1C\r\x1C\x0E\x1C\xB3\x03\x1C\x03\x1C\x02\x02" +
		"\x02\x1D\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x02\'\x02\x02)\x02" +
		"\x14+\x02\x15-\x02\x02/\x02\x021\x02\x023\x02\x025\x02\x027\x02\x16\x03" +
		"\x02\f\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--//\x04\x02//aa\n\x02$" +
		"$11^^ddhhppttvv\x05\x022;CHch\x05\x022;C\\c|\x05\x02\x02!$$^^\x05\x02" +
		"\v\f\x0F\x0F\"\"\xBC\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02" +
		"\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r" +
		"\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13" +
		"\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19" +
		"\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F" +
		"\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02)\x03\x02" +
		"\x02\x02\x02+\x03\x02\x02\x02\x027\x03\x02\x02\x02\x039\x03\x02\x02\x02" +
		"\x05;\x03\x02\x02\x02\x07=\x03\x02\x02\x02\t?\x03\x02\x02\x02\vD\x03\x02" +
		"\x02\x02\rL\x03\x02\x02\x02\x0FQ\x03\x02\x02\x02\x11W\x03\x02\x02\x02" +
		"\x13\\\x03\x02\x02\x02\x15^\x03\x02\x02\x02\x17`\x03\x02\x02\x02\x19c" +
		"\x03\x02\x02\x02\x1Bf\x03\x02\x02\x02\x1Dh\x03\x02\x02\x02\x1Fj\x03\x02" +
		"\x02\x02!l\x03\x02\x02\x02#o\x03\x02\x02\x02%\x85\x03\x02\x02\x02\'\x87" +
		"\x03\x02\x02\x02)\x8D\x03\x02\x02\x02+\x95\x03\x02\x02\x02-\x9F\x03\x02" +
		"\x02\x02/\xA4\x03\x02\x02\x021\xAA\x03\x02\x02\x023\xAC\x03\x02\x02\x02" +
		"5\xAE\x03\x02\x02\x027\xB1\x03\x02\x02\x029:\x07}\x02\x02:\x04\x03\x02" +
		"\x02\x02;<\x07\x7F\x02\x02<\x06\x03\x02\x02\x02=>\x07<\x02\x02>\b\x03" +
		"\x02\x02\x02?@\x07f\x02\x02@A\x07c\x02\x02AB\x07v\x02\x02BC\x07c\x02\x02" +
		"C\n\x03\x02\x02\x02DE\x07u\x02\x02EF\x07v\x02\x02FG\x07q\x02\x02GH\x07" +
		"t\x02\x02HI\x07c\x02\x02IJ\x07i\x02\x02JK\x07g\x02\x02K\f\x03\x02\x02" +
		"\x02LM\x07v\x02\x02MN\x07t\x02\x02NO\x07w\x02\x02OP\x07g\x02\x02P\x0E" +
		"\x03\x02\x02\x02QR\x07h\x02\x02RS\x07c\x02\x02ST\x07n\x02\x02TU\x07u\x02" +
		"\x02UV\x07g\x02\x02V\x10\x03\x02\x02\x02WX\x07p\x02\x02XY\x07w\x02\x02" +
		"YZ\x07n\x02\x02Z[\x07n\x02\x02[\x12\x03\x02\x02\x02\\]\x070\x02\x02]\x14" +
		"\x03\x02\x02\x02^_\x07.\x02\x02_\x16\x03\x02\x02\x02`a\x07}\x02\x02ab" +
		"\x07}\x02\x02b\x18\x03\x02\x02\x02cd\x07\x7F\x02\x02de\x07\x7F\x02\x02" +
		"e\x1A\x03\x02\x02\x02fg\x07*\x02\x02g\x1C\x03\x02\x02\x02hi\x07+\x02\x02" +
		"i\x1E\x03\x02\x02\x02jk\x07]\x02\x02k \x03\x02\x02\x02lm\x07_\x02\x02" +
		"m\"\x03\x02\x02\x02np\x07/\x02\x02on\x03\x02\x02\x02op\x03\x02\x02\x02" +
		"pq\x03\x02\x02\x02qx\x05%\x13\x02rt\x070\x02\x02su\t\x02\x02\x02ts\x03" +
		"\x02\x02\x02uv\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wy\x03" +
		"\x02\x02\x02xr\x03\x02\x02\x02xy\x03\x02\x02\x02y{\x03\x02\x02\x02z|\x05" +
		"\'\x14\x02{z\x03\x02\x02\x02{|\x03\x02\x02\x02|$\x03\x02\x02\x02}\x86" +
		"\x072\x02\x02~\x82\t\x03\x02\x02\x7F\x81\t\x02\x02\x02\x80\x7F\x03\x02" +
		"\x02\x02\x81\x84\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x82\x83\x03\x02" +
		"\x02\x02\x83\x86\x03\x02\x02\x02\x84\x82\x03\x02\x02\x02\x85}\x03\x02" +
		"\x02\x02\x85~\x03\x02\x02\x02\x86&\x03\x02\x02\x02\x87\x89\t\x04\x02\x02" +
		"\x88\x8A\t\x05\x02\x02\x89\x88\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02" +
		"\x8A\x8B\x03\x02\x02\x02\x8B\x8C\x05%\x13\x02\x8C(\x03\x02\x02\x02\x8D" +
		"\x92\x053\x1A\x02\x8E\x91\x053\x1A\x02\x8F\x91\t\x06\x02\x02\x90\x8E\x03" +
		"\x02\x02\x02\x90\x8F\x03\x02\x02\x02\x91\x94\x03\x02\x02\x02\x92\x90\x03" +
		"\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93*\x03\x02\x02\x02\x94\x92\x03" +
		"\x02\x02\x02\x95\x9A\x07$\x02\x02\x96\x99\x05-\x17\x02\x97\x99\x055\x1B" +
		"\x02\x98\x96\x03\x02\x02\x02\x98\x97\x03\x02\x02\x02\x99\x9C\x03\x02\x02" +
		"\x02\x9A\x98\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B\x9D\x03\x02\x02" +
		"\x02\x9C\x9A\x03\x02\x02\x02\x9D\x9E\x07$\x02\x02\x9E,\x03\x02\x02\x02" +
		"\x9F\xA2\x07^\x02\x02\xA0\xA3\t\x07\x02\x02\xA1\xA3\x05/\x18\x02\xA2\xA0" +
		"\x03\x02\x02\x02\xA2\xA1\x03\x02\x02\x02\xA3.\x03\x02\x02\x02\xA4\xA5" +
		"\x07w\x02\x02\xA5\xA6\x051\x19\x02\xA6\xA7\x051\x19\x02\xA7\xA8\x051\x19" +
		"\x02\xA8\xA9\x051\x19\x02\xA90\x03\x02\x02\x02\xAA\xAB\t\b\x02\x02\xAB" +
		"2\x03\x02\x02\x02\xAC\xAD\t\t\x02\x02\xAD4\x03\x02\x02\x02\xAE\xAF\n\n" +
		"\x02\x02\xAF6\x03\x02\x02\x02\xB0\xB2\t\v\x02\x02\xB1\xB0\x03\x02\x02" +
		"\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB3\xB4\x03\x02\x02" +
		"\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB6\b\x1C\x02\x02\xB68\x03\x02\x02\x02" +
		"\x10\x02ovx{\x82\x85\x89\x90\x92\x98\x9A\xA2\xB3\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONLexer.__ATN) {
			JSONLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONLexer._serializedATN));
		}

		return JSONLexer.__ATN;
	}

}

